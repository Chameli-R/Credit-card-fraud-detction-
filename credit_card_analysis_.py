# -*- coding: utf-8 -*-
"""credit card analysis .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-7u9wFPqSvF6wxgLFl4DzTdqjpGxvyjN
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import precision_recall_curve,roc_curve
from sklearn.metrics import auc,roc_auc_score
from sklearn import metrics as met, svm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.neural_network import MLPClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix
# %matplotlib inline

from google.colab import drive
drive.mount('/content/drive')

data= pd.read_csv('/content/creditcard.csv')

data

data.head()

data.isnull().sum()

features_cols=['Time','V1','V2','V3','V4','V5','V6','V7','V8','V9','V10','V11','V12','V13','V14','V15','V16','V17','V18','V19','V20','V21','V22','V23','V24','V25','V26','V27','V28','Amount']
X=data[features_cols]
Y=data.Class

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=0)

from imblearn.over_sampling import SMOTE
sm = SMOTE(random_state=0)
X_strain, Y_strain = sm.fit_resample(X_train, Y_train)
X_strain, Y_strain = sm.fit_resample(X_test, Y_test)

np.bincount(Y_train)

np.bincount(Y_strain)

np.bincount(Y_test)

data.shape

data.info

plt.figure(figsize=(10,10))
sns.heatmap(data.corr())

data.corr()

dtc = DecisionTreeClassifier(criterion="entropy").fit(X_strain,Y_strain)

decisiontreepredict=dtc.predict(X_strain)
decisiontreepredict

print("Train Result:\n================================================")
print(f"Accuracy Score: {accuracy_score(Y_strain, decisiontreepredict) * 100:.2f}%")
print("_______________________________________________")
print(f"CLASSIFICATION REPORT:\n{classification_report(Y_strain, decisiontreepredict)}")
print("_______________________________________________")
print(f"Confusion Matrix: \n {confusion_matrix(Y_strain, decisiontreepredict)}\n")

gaussNb=GaussianNB()
gaussNb.fit(X_strain,Y_strain)

nb_pred=gaussNb.predict(X_strain)

print("Train Result:\n================================================")
print(f"Accuracy Score: {accuracy_score(Y_strain, nb_pred) * 100:.2f}%")
print("_______________________________________________")
print(f"CLASSIFICATION REPORT:\n{classification_report(Y_strain, nb_pred)}")
print("_______________________________________________")
print(f"Confusion Matrix: \n {confusion_matrix(Y_strain, nb_pred)}\n")

multilayerperceptron=MLPClassifier(max_iter=500, activation='relu')

multilayerperceptron.fit(X_strain,Y_strain)
multilayerperceptron_Predict=multilayerperceptron.predict(X_strain)

print("Train Result:\n================================================")
print(f"Accuracy Score: {accuracy_score(Y_strain, multilayerperceptron_Predict) * 100:.2f}%")
print("_______________________________________________")
print(f"CLASSIFICATION REPORT:\n{classification_report(Y_strain, multilayerperceptron_Predict)}")
print("_______________________________________________")
print(f"Confusion Matrix: \n {confusion_matrix(Y_strain, multilayerperceptron_Predict)}\n")

KNN = KNeighborsClassifier()
KNN.fit(X_strain, Y_strain)
KNN_predict = KNN.predict(X_strain)

print("Train Result:\n================================================")
print(f"Accuracy Score: {accuracy_score(Y_strain, KNN_predict) * 100:.2f}%")
print("_______________________________________________")
print(f"CLASSIFICATION REPORT:\n{classification_report(Y_strain, KNN_predict)}")
print("_______________________________________________")
print(f"Confusion Matrix: \n {confusion_matrix(Y_strain, KNN_predict)}\n")

from sklearn.ensemble import GradientBoostingClassifier

gbc = GradientBoostingClassifier()
gbc.fit(X_strain, Y_strain)

gbc_pred = gbc.predict(X_strain)


print("Train Result:\n================================================")
print(f"Accuracy Score: {accuracy_score(Y_strain, gbc_pred) * 100:.2f}%")
print("_______________________________________________")
print(f"CLASSIFICATION REPORT:\n{classification_report(Y_strain, gbc_pred)}")
print("_______________________________________________")
print(f"Confusion Matrix: \n {confusion_matrix(Y_strain, gbc_pred)}\n")

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score

# Define the model
random_forest_model = RandomForestClassifier()

# Fit the random search object to the data
random_forest_model.fit(X_strain, Y_strain)

# Make predictions
rfm_y = random_forest_model.predict(X_strain)

print("Train Result:\n================================================")
print(f"Accuracy Score: {accuracy_score(Y_strain, rfm_y) * 100:.2f}%")
print("_______________________________________________")
print(f"CLASSIFICATION REPORT:\n{classification_report(Y_strain, rfm_y)}")
print("_______________________________________________")
print(f"Confusion Matrix: \n {confusion_matrix(Y_strain, rfm_y)}\n")

lr=LogisticRegression()
lr.fit(X_strain,Y_strain)

lr_pred = lr.predict(X_strain)
print("Train Result:\n================================================")
print(f"Accuracy Score: {accuracy_score(Y_strain, lr_pred) * 100:.2f}%")
print("_______________________________________________")
print(f"CLASSIFICATION REPORT:\n{classification_report(Y_strain, lr_pred)}")
print("_______________________________________________")
print(f"Confusion Matrix: \n {confusion_matrix(Y_strain, lr_pred)}\n")

clfs = GaussianNB().fit(X_strain, Y_strain)
Y_prob_train = clfs.predict_proba(X_strain)[:,1]
fpr, tpr, thresholds = roc_curve(Y_strain, Y_prob_train)

auroc = roc_auc_score(Y_strain, Y_prob_train)
print('AUC: %.3f' % auroc)

clf = GaussianNB().fit(X_strain, Y_strain)

Y_prob_train = clf.predict_proba(X_strain)[:,1]
Y_prob_test = clf.predict_proba(X_test)[:,1]

precision, recall, thresholds = precision_recall_curve(Y_strain, Y_prob_train)
plt.fill_between(recall, precision)
plt.ylabel("Precision")
plt.xlabel("Recall")
plt.title("Train Precision-Recall curve")

print(auc(recall, precision))